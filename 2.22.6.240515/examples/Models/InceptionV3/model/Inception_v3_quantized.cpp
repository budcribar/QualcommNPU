/* COPYRIGHT HEADER GOES HERE: No CopyRight Header String Passed During Model Conversion */

/* Command Line used:
qnn-tensorflow-converter act_bitwidth=8 act_bw=8 act_quantizer=tf act_quantizer_calibration=min-max act_quantizer_schema=asymmetric adjust_nms_features_dims=True algorithms=[] align_matmul_ranks=True apply_masked_softmax=uncompressed arch_checker=False bias_bitwidth=8 bias_bw=8 converter_op_package_lib= copyright_file=None custom_io= custom_op_config_paths=None debug=-1 disable_batchnorm_folding=False disable_match_lstms=False disable_node_validation=False disable_qnn_op_config_validation=False disable_relu_squashing=False dumpIR=False dump_encoding_json=False dump_qairt_io_config_yaml= dump_qairt_quantizer_command=None enable_framework_trace=False enable_match_gathernd=False exclude_named_tensors=False expand_gru_op_structure=False expand_lstm_op_structure=False expand_sparse_op_structure=False export_format=cpp extract_color_transform=True float_bias_bitwidth=0 float_bias_bw=0 float_bitwidth=32 float_bw=32 float_fallback=False force_prune_cast_ops=False handle_gather_negative_indices=True ignore_encodings=False include_data_invariant_ops=False inject_cast_for_gather=True input_dim=[['input', '1,299,299,3']] input_dtype=[] input_encoding=[] input_layout=[] input_list=C:\Users\Andaz-8CBE\source\repos\HPPCDiags-SST\Studies\ArmNPU\2.22.6.240515/examples/Models/InceptionV3/data/cropped/raw_list.txt input_type=[] keep_disconnected_nodes=False keep_int64_inputs=False keep_quant_nodes=False match_caffe_ssd_to_tf=True model_version=None multi_time_steps_gru=False multi_time_steps_lstm=False no_optimization=False op_package_lib= out_names=['InceptionV3/Predictions/Reshape_1'] overwrite_model_prefix=False pack_4_bit_weights=False package_name=None packed_masked_softmax_inputs=[] packed_max_seq=1 param_quantizer=None param_quantizer_calibration=min-max param_quantizer_schema=asymmetric percentile_calibration_value=99.99 perform_axes_to_spatial_first_order=False prepare_inputs_as_params=False preprocess_roi_pool_inputs=False preserve_io=[] quantization_overrides= restrict_quantization_steps=[] saved_model_signature_key=serving_default saved_model_tag=serve show_unconsumed_nodes=False squash_box_decoder=True unroll_gru_time_steps=False unroll_lstm_time_steps=True use_aimet_quantizer=False use_convert_quantization_nodes=False use_dynamic_16_bit_weights=False use_native_dtype=False use_native_input_files=False use_native_output_files=False use_per_channel_quantization=False use_per_row_quantization=False validate_models=False weight_bw=8 weights_bitwidth=8
*/

#include "QnnOpDef.h"
#include "QnnModel.hpp"

// Flag to determine if Backend should do node validation for each opNode added
#define DO_GRAPH_NODE_VALIDATIONS 1

using namespace qnn_wrapper_api;
extern "C" {
static ModelError_t addTensor_input_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_input_0[] = {1, 299, 299, 3};
  VALIDATE(model.addTensor("input_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "input_0",
                                 .type= QNN_TENSOR_TYPE_APP_WRITE,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0078125000000000f, .offset= -128}}},
                                 .rank= 4,
                                 .dimensions=dimensions_input_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=nullptr,
                                                .dataSize=0}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Conv2d_1a_3x3_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Conv2d_1a_3x3_weights_read_0[] = {3, 3, 3, 32};
  VALIDATE(model.addTensor("InceptionV3_Conv2d_1a_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Conv2d_1a_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0377495400607586f, .offset= -118}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Conv2d_1a_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Conv2d_1a_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Conv2d_1a_3x3_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_bias[] = {32};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0218251384794712f, .offset= -70}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_stride[] = {2, 2};
  Qnn_Param_t params_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution[] = {
    "input_0",
    "InceptionV3_Conv2d_1a_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_Relu_0[] = {1, 149, 149, 32};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_1a_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0418485589325428f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Conv2d_2a_3x3_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Conv2d_2a_3x3_weights_read_0[] = {3, 3, 32, 32};
  VALIDATE(model.addTensor("InceptionV3_Conv2d_2a_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Conv2d_2a_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0109345475211740f, .offset= -76}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Conv2d_2a_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Conv2d_2a_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Conv2d_2a_3x3_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_bias[] = {32};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0320040360093117f, .offset= -99}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Conv2d_1a_3x3_Relu_0",
    "InceptionV3_Conv2d_2a_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_Relu_0[] = {1, 147, 147, 32};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_2a_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0324728302657604f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Conv2d_2b_3x3_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Conv2d_2b_3x3_weights_read_0[] = {3, 3, 32, 64};
  VALIDATE(model.addTensor("InceptionV3_Conv2d_2b_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Conv2d_2b_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0082356454804540f, .offset= -100}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Conv2d_2b_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Conv2d_2b_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Conv2d_2b_3x3_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0243453737348318f, .offset= -89}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Conv2d_2a_3x3_Relu_0",
    "InceptionV3_Conv2d_2b_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_Relu_0[] = {1, 147, 147, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_2b_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0417017750442028f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool */
  uint32_t dimensions_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_stride[] = {2, 2};
  Qnn_Param_t params_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_filter_size,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool[] = {
    "InceptionV3_InceptionV3_Conv2d_2b_3x3_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_0[] = {1, 73, 73, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0417017750442028f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolMax2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool, // Node Params
                         3, // Num Node Params
                         inputs_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Conv2d_3b_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Conv2d_3b_1x1_weights_read_0[] = {1, 1, 64, 80};
  VALIDATE(model.addTensor("InceptionV3_Conv2d_3b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Conv2d_3b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0087879281491041f, .offset= -106}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Conv2d_3b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Conv2d_3b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Conv2d_3b_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_bias[] = {80};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0342499427497387f, .offset= -48}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_0",
    "InceptionV3_Conv2d_3b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_Relu_0[] = {1, 73, 73, 80};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_3b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0454343296587467f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Conv2d_4a_3x3_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Conv2d_4a_3x3_weights_read_0[] = {3, 3, 80, 192};
  VALIDATE(model.addTensor("InceptionV3_Conv2d_4a_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Conv2d_4a_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0057581062428653f, .offset= -127}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Conv2d_4a_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Conv2d_4a_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Conv2d_4a_3x3_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0564179718494415f, .offset= -91}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Conv2d_3b_1x1_Relu_0",
    "InceptionV3_Conv2d_4a_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_Relu_0[] = {1, 71, 71, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_4a_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0379460230469704f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool */
  uint32_t dimensions_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_stride[] = {2, 2};
  Qnn_Param_t params_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_filter_size,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool[] = {
    "InceptionV3_InceptionV3_Conv2d_4a_3x3_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_0[] = {1, 35, 35, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0379460230469704f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolMax2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool, // Node Params
                         3, // Num Node Params
                         inputs_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 192, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0042790607549250f, .offset= -130}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0301605369895697f, .offset= -41}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_0",
    "InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0334636643528938f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 192, 48};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0039929640479386f, .offset= -129}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_bias[] = {48};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0221585016697645f, .offset= -116}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_0",
    "InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_Relu_0[] = {1, 35, 35, 48};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0384823046624660f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 192, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0054525267332792f, .offset= -89}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0468739792704582f, .offset= -85}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_0",
    "InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0304839331656694f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="count_pad_for_edges",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_BOOL_8, {.bool8Value = 0}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    "InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_0[] = {1, 35, 35, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0261368062347174f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolAvg2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_weights_read_0[] = {1, 1, 192, 32};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0086495261639357f, .offset= -164}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_bias[] = {32};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0390560738742352f, .offset= -170}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_0",
    "InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_Relu_0[] = {1, 35, 35, 32};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0167433805763721f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_weights_read_0[] = {3, 3, 64, 96};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0057656615972519f, .offset= -121}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_bias[] = {96};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0346908830106258f, .offset= -78}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_Relu_0[] = {1, 35, 35, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0331827253103256f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_weights_read_0[] = {3, 3, 96, 96};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0042475382797420f, .offset= -79}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_bias[] = {96};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0211423337459564f, .offset= -112}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_Relu_0",
    "InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_Relu_0[] = {1, 35, 35, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0358136668801308f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_weights_read_0[] = {5, 5, 48, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0047455681487918f, .offset= -114}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0266628619283438f, .offset= -82}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_pad_amount[] = {2, 2, 2, 2};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0332663878798485f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_concat_v2(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5b_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_Relu_0",
    "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_Relu_0",
    "InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_concat_v2_0[] = {1, 35, 35, 256};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0358136668801308f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5b_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_concat_v2, // Input Tensor Names
                         4, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 256, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0053805480711162f, .offset= -116}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0317473672330379f, .offset= -121}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5b_concat_v2_0",
    "InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0332128778100014f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_weights_read_0[] = {1, 1, 256, 48};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0045057763345540f, .offset= -132}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_bias[] = {48};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0453122705221176f, .offset= -102}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5b_concat_v2_0",
    "InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_Relu_0[] = {1, 35, 35, 48};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0279680378735065f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 256, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0049954983405769f, .offset= -118}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0379375927150249f, .offset= -138}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5b_concat_v2_0",
    "InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0285891182720661f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="count_pad_for_edges",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_BOOL_8, {.bool8Value = 0}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    "InceptionV3_InceptionV3_Mixed_5b_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_0[] = {1, 35, 35, 256};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0263132378458977f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolAvg2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_weights_read_0[] = {1, 1, 256, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0089081712067127f, .offset= -121}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0333716236054897f, .offset= -123}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_0",
    "InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0174803528934717f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_weights_read_0[] = {3, 3, 64, 96};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0045515773817897f, .offset= -98}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_bias[] = {96};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0263878479599953f, .offset= -79}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_Relu_0[] = {1, 35, 35, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0373090505599976f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_weights_read_0[] = {3, 3, 96, 96};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0062747858464718f, .offset= -66}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_bias[] = {96};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0156335774809122f, .offset= -146}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_Relu_0",
    "InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_Relu_0[] = {1, 35, 35, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0569151304662228f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_weights_read_0[] = {5, 5, 48, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0037197049241513f, .offset= -119}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0268172807991505f, .offset= -101}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_pad_amount[] = {2, 2, 2, 2};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_Relu_0",
    "InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0280874036252499f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_concat_v2(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5c_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_Relu_0",
    "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_Relu_0",
    "InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_concat_v2_0[] = {1, 35, 35, 288};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0569151304662228f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5c_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_concat_v2, // Input Tensor Names
                         4, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 288, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0062148878350854f, .offset= -173}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0285571627318859f, .offset= -104}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5c_concat_v2_0",
    "InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0341059193015099f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 288, 48};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0045077069662511f, .offset= -113}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_bias[] = {48};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0220457874238491f, .offset= -133}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5c_concat_v2_0",
    "InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_Relu_0[] = {1, 35, 35, 48};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0338692367076874f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 288, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0065775699913502f, .offset= -135}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0326057113707066f, .offset= -100}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5c_concat_v2_0",
    "InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0477734357118607f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="count_pad_for_edges",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_BOOL_8, {.bool8Value = 0}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    "InceptionV3_InceptionV3_Mixed_5c_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_0[] = {1, 35, 35, 288};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0231772325932980f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolAvg2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_weights_read_0[] = {1, 1, 288, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0089196674525738f, .offset= -93}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0307129044085741f, .offset= -155}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_0",
    "InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0334755592048168f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_weights_read_0[] = {3, 3, 64, 96};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0046596149913967f, .offset= -126}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_bias[] = {96};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0150014348328114f, .offset= -114}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_Relu_0[] = {1, 35, 35, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0337928943336010f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_weights_read_0[] = {3, 3, 96, 96};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0035301980096847f, .offset= -85}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_bias[] = {96};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0107221174985170f, .offset= -73}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_Relu_0",
    "InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_Relu_0[] = {1, 35, 35, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0292788110673428f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_weights_read_0[] = {5, 5, 48, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0026026400737464f, .offset= -114}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0153636289760470f, .offset= -79}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_pad_amount[] = {2, 2, 2, 2};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0340163037180901f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_concat_v2(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5d_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_Relu_0",
    "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_Relu_0",
    "InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_concat_v2_0[] = {1, 35, 35, 288};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0341059193015099f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5d_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_concat_v2, // Input Tensor Names
                         4, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_weights_read_0[] = {3, 3, 288, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0028958385810256f, .offset= -79}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0332316942512989f, .offset= -108}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_stride[] = {2, 2};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5d_concat_v2_0",
    "InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_Relu_0[] = {1, 17, 17, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0251207407563925f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 288, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0051536904647946f, .offset= -126}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0233478676527739f, .offset= -103}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5d_concat_v2_0",
    "InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0326809100806713f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_stride[] = {2, 2};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_filter_size,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool[] = {
    "InceptionV3_InceptionV3_Mixed_5d_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_0[] = {1, 17, 17, 288};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0341059193015099f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolMax2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool, // Node Params
                         3, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_weights_read_0[] = {3, 3, 64, 96};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0039578438736498f, .offset= -105}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_bias[] = {96};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0151398694142699f, .offset= -201}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_Relu_0[] = {1, 35, 35, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0294358562678099f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_weights_read_0[] = {3, 3, 96, 96};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0033306865952909f, .offset= -86}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_bias[] = {96};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0110414819791913f, .offset= -126}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_stride[] = {2, 2};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_Relu_0",
    "InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_Relu_0[] = {1, 17, 17, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0286909397691488f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6a_concat_v2(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6a_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6a_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6a_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_concat_v2_0[] = {1, 17, 17, 768};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6a_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0341059193015099f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6a_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6a_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6a_concat_v2, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6a_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0047059948556125f, .offset= -109}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0225311834365129f, .offset= -107}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6a_concat_v2_0",
    "InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0298120230436325f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 128};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0044592600315809f, .offset= -80}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_bias[] = {128};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0157530643045902f, .offset= -163}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6a_concat_v2_0",
    "InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 128};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0331523753702641f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 128};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0041337856091559f, .offset= -145}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_bias[] = {128};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0204743668437004f, .offset= -126}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6a_concat_v2_0",
    "InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 128};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0280198771506548f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="count_pad_for_edges",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_BOOL_8, {.bool8Value = 0}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    "InceptionV3_InceptionV3_Mixed_6a_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_0[] = {1, 17, 17, 768};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0284663382917643f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolAvg2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0098218759521842f, .offset= -147}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0355824045836926f, .offset= -130}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_0",
    "InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0176983494311571f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_weights_read_0[] = {7, 1, 128, 128};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0036700221244246f, .offset= -83}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_bias[] = {128};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0181616973131895f, .offset= -152}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_Relu_0[] = {1, 17, 17, 128};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0295475795865059f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_weights_read_0[] = {1, 7, 128, 128};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0044500948861241f, .offset= -83}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_bias[] = {128};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0170186366885900f, .offset= -124}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_Relu_0",
    "InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_Relu_0[] = {1, 17, 17, 128};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0311114564538002f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_weights_read_0[] = {7, 1, 128, 128};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0043633594177663f, .offset= -83}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_bias[] = {128};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0183091424405575f, .offset= -135}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_Relu_0",
    "InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_Relu_0[] = {1, 17, 17, 128};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0468733571469784f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_weights_read_0[] = {1, 7, 128, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0033381585963070f, .offset= -100}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0192806217819452f, .offset= -110}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_Relu_0",
    "InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0620399080216885f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_weights_read_0[] = {1, 7, 128, 128};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0054808924905956f, .offset= -80}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_bias[] = {128};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0128697426989675f, .offset= -107}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_Relu_0[] = {1, 17, 17, 128};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0358888059854507f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_weights_read_0[] = {7, 1, 128, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0050857202149928f, .offset= -100}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0166503768414259f, .offset= -130}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_Relu_0",
    "InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0304796434938908f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_concat_v2(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_concat_v2_0[] = {1, 17, 17, 768};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0620399080216885f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_concat_v2, // Input Tensor Names
                         4, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0048592654056847f, .offset= -115}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0150222592055798f, .offset= -109}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6b_concat_v2_0",
    "InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0328923910856247f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0068170190788805f, .offset= -141}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0121624860912561f, .offset= -151}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6b_concat_v2_0",
    "InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0380501076579094f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0058824671432376f, .offset= -105}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0257358588278294f, .offset= -129}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6b_concat_v2_0",
    "InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0340448133647442f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="count_pad_for_edges",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_BOOL_8, {.bool8Value = 0}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    "InceptionV3_InceptionV3_Mixed_6b_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_0[] = {1, 17, 17, 768};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0396386086940765f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolAvg2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0072579411789775f, .offset= -122}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0163761917501688f, .offset= -169}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_0",
    "InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0359710268676281f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_weights_read_0[] = {7, 1, 160, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0034160672221333f, .offset= -103}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0108562130481005f, .offset= -137}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0430857986211777f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_weights_read_0[] = {1, 7, 160, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0045871254988015f, .offset= -100}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0161531530320644f, .offset= -147}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_Relu_0",
    "InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0440161041915417f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_weights_read_0[] = {7, 1, 160, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0040129362605512f, .offset= -96}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0166312716901302f, .offset= -141}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_Relu_0",
    "InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0594082139432430f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_weights_read_0[] = {1, 7, 160, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0041270307265222f, .offset= -93}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0230769533663988f, .offset= -144}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_Relu_0",
    "InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0648961514234543f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_weights_read_0[] = {1, 7, 160, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0042678304016590f, .offset= -110}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0115600349381566f, .offset= -134}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0329112522304058f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_weights_read_0[] = {7, 1, 160, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0049889823421836f, .offset= -113}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0139483511447906f, .offset= -126}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_Relu_0",
    "InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0235387496650219f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_concat_v2(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_concat_v2_0[] = {1, 17, 17, 768};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0648961514234543f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_concat_v2, // Input Tensor Names
                         4, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0076500615105033f, .offset= -154}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0115726627409458f, .offset= -92}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6c_concat_v2_0",
    "InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0395501405000687f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0043348749168217f, .offset= -135}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0187882967293262f, .offset= -150}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6c_concat_v2_0",
    "InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0466068573296070f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0059372056275606f, .offset= -112}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0130545450374484f, .offset= -174}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6c_concat_v2_0",
    "InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0440607368946075f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="count_pad_for_edges",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_BOOL_8, {.bool8Value = 0}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    "InceptionV3_InceptionV3_Mixed_6c_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_0[] = {1, 17, 17, 768};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0258456375449896f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolAvg2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0122371567413211f, .offset= -146}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0091561526060104f, .offset= -130}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_0",
    "InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0300963986665010f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_weights_read_0[] = {7, 1, 160, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0058333636261523f, .offset= -93}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0128117324784398f, .offset= -144}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0462535247206688f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_weights_read_0[] = {1, 7, 160, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0042407922446728f, .offset= -107}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0141058722510934f, .offset= -147}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_Relu_0",
    "InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0338736847043037f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_weights_read_0[] = {7, 1, 160, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0064144646748900f, .offset= -149}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0096452031284571f, .offset= -119}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_Relu_0",
    "InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0317911654710770f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_weights_read_0[] = {1, 7, 160, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0060623246245086f, .offset= -157}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0209597796201706f, .offset= -136}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_Relu_0",
    "InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0337022356688976f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_weights_read_0[] = {1, 7, 160, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0063837748020887f, .offset= -78}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0105449026450515f, .offset= -143}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0419583693146706f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_weights_read_0[] = {7, 1, 160, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0043844305910170f, .offset= -103}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0157643500715494f, .offset= -181}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_Relu_0",
    "InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0385890901088715f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_concat_v2(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_concat_v2_0[] = {1, 17, 17, 768};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0395501405000687f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_concat_v2, // Input Tensor Names
                         4, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0074155419133604f, .offset= -122}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0047812410630286f, .offset= -87}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6d_concat_v2_0",
    "InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0230645071715117f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0061807977035642f, .offset= -95}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0062178084626794f, .offset= -188}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6d_concat_v2_0",
    "InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0414568483829498f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0046599362976849f, .offset= -131}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0127073321491480f, .offset= -184}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6d_concat_v2_0",
    "InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0373573489487171f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="count_pad_for_edges",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_BOOL_8, {.bool8Value = 0}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    "InceptionV3_InceptionV3_Mixed_6d_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_0[] = {1, 17, 17, 768};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0226630717515945f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolAvg2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0070469095371664f, .offset= -125}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0062949946150184f, .offset= -151}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_0",
    "InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0291712842881680f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_weights_read_0[] = {7, 1, 192, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0034390122164041f, .offset= -93}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0099024567753077f, .offset= -157}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0323662385344505f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_weights_read_0[] = {1, 7, 192, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0042474926449358f, .offset= -101}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0118058342486620f, .offset= -162}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_Relu_0",
    "InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0392115414142609f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_weights_read_0[] = {7, 1, 192, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0028774077072740f, .offset= -113}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0119388895109296f, .offset= -178}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_Relu_0",
    "InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0428752303123474f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_weights_read_0[] = {1, 7, 192, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0022845605853945f, .offset= -104}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0096611306071281f, .offset= -81}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_Relu_0",
    "InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0198581404983997f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_weights_read_0[] = {1, 7, 192, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0059005371294916f, .offset= -71}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0088544311001897f, .offset= -162}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0467602759599686f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_weights_read_0[] = {7, 1, 192, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0025530112907290f, .offset= -122}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0164033398032188f, .offset= -74}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_Relu_0",
    "InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0187907423824072f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_concat_v2(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_concat_v2_0[] = {1, 17, 17, 768};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0291712842881680f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_concat_v2, // Input Tensor Names
                         4, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0063744862563908f, .offset= -115}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0152653241530061f, .offset= -185}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6e_concat_v2_0",
    "InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0294959936290979f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0091358358040452f, .offset= -118}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0196441747248173f, .offset= -148}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6e_concat_v2_0",
    "InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0468542389571667f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_stride[] = {2, 2};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_filter_size,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool[] = {
    "InceptionV3_InceptionV3_Mixed_6e_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_0[] = {1, 8, 8, 768};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0291712842881680f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolMax2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool, // Node Params
                         3, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_weights_read_0[] = {1, 7, 192, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0035291556268930f, .offset= -116}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0196186136454344f, .offset= -133}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0473562031984329f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_weights_read_0[] = {7, 1, 192, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0028915028087795f, .offset= -116}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0203102398663759f, .offset= -178}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_Relu_0",
    "InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0278983954340219f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_weights_read_0[] = {3, 3, 192, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0059585352428257f, .offset= -94}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0154582364484668f, .offset= -124}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_stride[] = {2, 2};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_Relu_0",
    "InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_Relu_0[] = {1, 8, 8, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0347320958971977f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_weights_read_0[] = {3, 3, 192, 320};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0035573532804847f, .offset= -77}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_bias[] = {320};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0233673565089703f, .offset= -108}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_stride[] = {2, 2};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_Relu_0[] = {1, 8, 8, 320};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0547523871064186f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_concat_v2(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7a_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_concat_v2_0[] = {1, 8, 8, 1280};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0547523871064186f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7a_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_concat_v2, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 1280, 320};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0062991445884109f, .offset= -105}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_bias[] = {320};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0125693175941706f, .offset= -139}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7a_concat_v2_0",
    "InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_Relu_0[] = {1, 8, 8, 320};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0203161910176277f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 1280, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0044309175573289f, .offset= -79}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0076830633915961f, .offset= -176}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7a_concat_v2_0",
    "InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0272986628115177f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 1280, 448};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0045437375083566f, .offset= -94}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_bias[] = {448};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0172050576657057f, .offset= -184}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7a_concat_v2_0",
    "InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_Relu_0[] = {1, 8, 8, 448};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0305287521332502f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="count_pad_for_edges",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_BOOL_8, {.bool8Value = 0}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    "InceptionV3_InceptionV3_Mixed_7a_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_0[] = {1, 8, 8, 1280};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0279959831386805f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolAvg2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_weights_read_0[] = {1, 1, 1280, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0076925684697926f, .offset= -105}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0081169959157705f, .offset= -122}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_0",
    "InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_Relu_0[] = {1, 8, 8, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0134410681203008f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_weights_read_0[] = {3, 3, 448, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0021031305659562f, .offset= -100}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0131846517324448f, .offset= -180}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0231650490313768f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_weights_read_0[] = {3, 1, 384, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0030145202763379f, .offset= -102}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0201826319098473f, .offset= -174}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_pad_amount[] = {1, 1, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_Relu_0",
    "InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0227888040244579f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_weights_read_0[] = {1, 3, 384, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0048854961059988f, .offset= -117}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0220240950584412f, .offset= -148}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_pad_amount[] = {0, 0, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_Relu_0",
    "InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0335823707282543f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_weights_read_0[] = {3, 1, 384, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0063870213925838f, .offset= -92}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0044966409914196f, .offset= -185}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_pad_amount[] = {1, 1, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0273623447865248f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_weights_read_0[] = {1, 3, 384, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0038967770524323f, .offset= -88}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0057023512199521f, .offset= -213}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_pad_amount[] = {0, 0, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0416361093521118f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_concat_v2(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_concat_v2_0[] = {1, 8, 8, 2048};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0416361093521118f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_concat_v2, // Input Tensor Names
                         6, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 2048, 320};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0142881758511066f, .offset= -85}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_bias[] = {320};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0025203637778759f, .offset= -141}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7b_concat_v2_0",
    "InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_Relu_0[] = {1, 8, 8, 320};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0577712804079056f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 2048, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0076273255981505f, .offset= -113}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0091923009604216f, .offset= -158}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7b_concat_v2_0",
    "InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0225370116531849f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 2048, 448};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0060899602249265f, .offset= -132}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_bias[] = {448};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0107367904856801f, .offset= -184}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7b_concat_v2_0",
    "InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_Relu_0[] = {1, 8, 8, 448};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0337856784462929f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="count_pad_for_edges",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_BOOL_8, {.bool8Value = 0}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    "InceptionV3_InceptionV3_Mixed_7b_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_0[] = {1, 8, 8, 2048};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0238987859338522f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolAvg2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_weights_read_0[] = {1, 1, 2048, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0211724452674389f, .offset= -135}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0039824284613132f, .offset= -55}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_0",
    "InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_Relu_0[] = {1, 8, 8, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0298082437366247f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_weights_read_0[] = {3, 3, 448, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0036370737943798f, .offset= -78}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0142759606242180f, .offset= -52}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0295749176293612f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_weights_read_0[] = {3, 1, 384, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0054516741074622f, .offset= -83}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0023047232534736f, .offset= -255}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_pad_amount[] = {1, 1, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_Relu_0",
    "InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0269083306193352f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_weights_read_0[] = {1, 3, 384, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0062618074007332f, .offset= -109}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0026992403436452f, .offset= -253}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_pad_amount[] = {0, 0, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_Relu_0",
    "InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0261527355760336f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_weights_read_0[] = {3, 1, 384, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0098961405456066f, .offset= -47}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0021248091943562f, .offset= -255}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_pad_amount[] = {1, 1, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0535242781043053f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_weights_read_0[] = {1, 3, 384, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0091744726523757f, .offset= -43}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_bias(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0021757462527603f, .offset= -255}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_bias)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_pad_amount[] = {0, 0, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0778700560331345f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_concat_v2(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_concat_v2_0[] = {1, 8, 8, 2048};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0778700560331345f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_concat_v2, // Input Tensor Names
                         6, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_Logits_AvgPool_1a_8x8_AvgPool */
  uint32_t dimensions_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_filter_size[] = {2};
  uint32_t InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_filter_size[] = {8, 8};
  uint32_t dimensions_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_stride[] = {2};
  uint32_t InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_stride[] = {2, 2};
  Qnn_Param_t params_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_filter_size,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="count_pad_for_edges",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_BOOL_8, {.bool8Value = 0}}}}
  };
  const char*  inputs_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool[] = {
    "InceptionV3_InceptionV3_Mixed_7c_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_0[] = {1, 1, 1, 2048};
  Qnn_Tensor_t outputs_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0132780326530337f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_Logits_AvgPool_1a_8x8_AvgPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolAvg2d", // Qnn Node Type
                         params_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Logits_Conv2d_1c_1x1_weights_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Logits_Conv2d_1c_1x1_weights_read_0[] = {1, 1, 2048, 1001};
  VALIDATE(model.addTensor("InceptionV3_Logits_Conv2d_1c_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Logits_Conv2d_1c_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0016015216242522f, .offset= -109}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Logits_Conv2d_1c_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Logits_Conv2d_1c_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Logits_Conv2d_1c_1x1_weights_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Logits_Conv2d_1c_1x1_biases_read_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Logits_Conv2d_1c_1x1_biases_read_0[] = {1001};
  VALIDATE(model.addTensor("InceptionV3_Logits_Conv2d_1c_1x1_biases_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_2,
                               {.v2= {
                                 .id=0,
                                 .name= "InceptionV3_Logits_Conv2d_1c_1x1_biases_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
                                 .dataType= QNN_DATATYPE_UFIXED_POINT_8,
                                 .quantizeParams= { QNN_DEFINITION_DEFINED,
                                                    QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                                                    {.scaleOffsetEncoding= {.scale= 0.0090927770361304f, .offset= -120}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_Logits_Conv2d_1c_1x1_biases_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Logits_Conv2d_1c_1x1_biases_read_0),
                                                .dataSize=BINLEN(InceptionV3_Logits_Conv2d_1c_1x1_biases_read_0)}},
                                 .isDynamicDimensions= nullptr,
                                 .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                                                  .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
                                 .isProduced= 0}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_Logits_Conv2d_1c_1x1_convolution(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_Logits_Conv2d_1c_1x1_convolution */
  uint32_t dimensions_InceptionV3_Logits_Conv2d_1c_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_Logits_Conv2d_1c_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_Logits_Conv2d_1c_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_Logits_Conv2d_1c_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_Logits_Conv2d_1c_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_Logits_Conv2d_1c_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_Logits_Conv2d_1c_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_Logits_Conv2d_1c_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_Logits_Conv2d_1c_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_Logits_Conv2d_1c_1x1_convolution_dilation,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_Logits_Conv2d_1c_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_Logits_Conv2d_1c_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_Logits_Conv2d_1c_1x1_convolution_pad_amount,
                           .dataSize=16}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_Logits_Conv2d_1c_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_Logits_Conv2d_1c_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_Logits_Conv2d_1c_1x1_convolution_stride,
                           .dataSize=8}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_Logits_Conv2d_1c_1x1_convolution[] = {
    "InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_0",
    "InceptionV3_Logits_Conv2d_1c_1x1_weights_read_0",
    "InceptionV3_Logits_Conv2d_1c_1x1_biases_read_0"
  };
  uint32_t dimensions_InceptionV3_Logits_Conv2d_1c_1x1_BiasAdd_0[] = {1, 1, 1, 1001};
  Qnn_Tensor_t outputs_InceptionV3_Logits_Conv2d_1c_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_Logits_Conv2d_1c_1x1_BiasAdd_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0584028847515583f, .offset= -62}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_Logits_Conv2d_1c_1x1_BiasAdd_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_Logits_Conv2d_1c_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_Logits_Conv2d_1c_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_Logits_Conv2d_1c_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_Logits_Conv2d_1c_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_Logits_SpatialSqueeze_0(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_Logits_SpatialSqueeze_0 */
  const char*  inputs_InceptionV3_Logits_SpatialSqueeze_0[] = {
    "InceptionV3_Logits_Conv2d_1c_1x1_BiasAdd_0"
  };
  uint32_t dimensions_InceptionV3_Predictions_Reshape_0[] = {1, 1001};
  Qnn_Tensor_t outputs_InceptionV3_Logits_SpatialSqueeze_0[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_Predictions_Reshape_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0584028847515583f, .offset= -62}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_Predictions_Reshape_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_Logits_SpatialSqueeze_0", // Node Name
                         "qti.aisw", // Package Name
                         "Reshape", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_Logits_SpatialSqueeze_0, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_Logits_SpatialSqueeze_0, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_Predictions_Softmax(QnnModel& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_Predictions_Softmax */
  Qnn_Param_t params_InceptionV3_Predictions_Softmax[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="beta",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_FLOAT_32, {.floatValue = 1.000000000000f}}}}
  };
  const char*  inputs_InceptionV3_Predictions_Softmax[] = {
    "InceptionV3_Predictions_Reshape_0"
  };
  uint32_t dimensions_InceptionV3_Predictions_Reshape_1_0[] = {1, 1001};
  Qnn_Tensor_t outputs_InceptionV3_Predictions_Softmax[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_2,
          {.v2= {
            .id=0,
            .name= "InceptionV3_Predictions_Reshape_1_0",
            .type= QNN_TENSOR_TYPE_APP_READ,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_DENSE,
            .dataType= QNN_DATATYPE_UFIXED_POINT_8,
            .quantizeParams= { QNN_DEFINITION_DEFINED,
                               QNN_QUANTIZATION_ENCODING_SCALE_OFFSET,
                               {.scaleOffsetEncoding= {.scale= 0.0039062500000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_Predictions_Reshape_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}},
            .isDynamicDimensions= nullptr,
            .sparseParams= { QNN_SPARSE_LAYOUT_UNDEFINED,
                             .hybridCoo= {.numSpecifiedElements= 0, .numSparseDimensions= 0}},
            .isProduced= 0}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_Predictions_Softmax", // Node Name
                         "qti.aisw", // Package Name
                         "Softmax", // Qnn Node Type
                         params_InceptionV3_Predictions_Softmax, // Node Params
                         2, // Num Node Params
                         inputs_InceptionV3_Predictions_Softmax, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_Predictions_Softmax, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

QNN_API
ModelError_t QnnModel_composeGraphs(Qnn_BackendHandle_t backendHandle,
                                    QNN_INTERFACE_VER_TYPE interface,
                                    Qnn_ContextHandle_t contextHandle,
                                    const GraphConfigInfo_t** graphsConfigInfo,
                                    const uint32_t numGraphsConfigInfo,
                                    GraphInfoPtr_t** graphsInfo,
                                    uint32_t* numGraphsInfo,
                                    bool debug,
                                    QnnLog_Callback_t logCallback,
                                    QnnLog_Level_t maxLogLevel) {

  ModelError_t err = MODEL_NO_ERROR;

  /* model/graph for Inception_v3_quantized*/
  QnnModel Inception_v3_quantized;
  const QnnGraph_Config_t** graphConfigs = nullptr;
  VALIDATE(getQnnGraphConfigFromInfo("Inception_v3_quantized", graphsConfigInfo, numGraphsConfigInfo, graphConfigs), err);
  VALIDATE(Inception_v3_quantized.initialize(backendHandle, interface, contextHandle, "Inception_v3_quantized", debug, DO_GRAPH_NODE_VALIDATIONS, graphConfigs), err);
  VALIDATE(addTensor_input_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Conv2d_1a_3x3_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Conv2d_2a_3x3_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Conv2d_2b_3x3_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Conv2d_3b_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Conv2d_4a_3x3_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_concat_v2(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_concat_v2(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_concat_v2(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6a_concat_v2(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_concat_v2(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_concat_v2(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_concat_v2(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_concat_v2(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_concat_v2(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_concat_v2(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_bias(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_concat_v2(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Logits_Conv2d_1c_1x1_weights_read_0(Inception_v3_quantized), err);
  VALIDATE(addTensor_InceptionV3_Logits_Conv2d_1c_1x1_biases_read_0(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_Logits_Conv2d_1c_1x1_convolution(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_Logits_SpatialSqueeze_0(Inception_v3_quantized), err);
  VALIDATE(addNode_InceptionV3_Predictions_Softmax(Inception_v3_quantized), err);

  // Add all models to array to get graphsInfo
  QnnModel* models [] = {&Inception_v3_quantized};
  uint32_t numModels = 1;

  // Populate the constructed graphs in provided output variables
  VALIDATE(getGraphInfoFromModels(*models, numModels, graphsInfo), err);
  *numGraphsInfo = numModels;

  return err;

} // PREPARE_GRAPHS

QNN_API
ModelError_t QnnModel_freeGraphsInfo(GraphInfoPtr_t** graphsInfo, uint32_t numGraphsInfo){
  return qnn_wrapper_api::freeGraphsInfo(graphsInfo, numGraphsInfo);
} // FREEGRAPHINFO

}