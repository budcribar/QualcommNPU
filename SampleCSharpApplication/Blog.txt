#define QNN_API_VERSION_MAJOR 2
#define QNN_API_VERSION_MINOR 15
#define QNN_API_VERSION_PATCH 0


#define QNN_INTERFACE_VER_TYPE \
  QNN_INTERFACE_VER_TYPE_EVAL(QNN_API_VERSION_MAJOR, QNN_API_VERSION_MINOR)

#define QNN_INTERFACE_VER_NAME \
  QNN_INTERFACE_VER_NAME_EVAL(QNN_API_VERSION_MAJOR, QNN_API_VERSION_MINOR)

  typedef struct {
  /// Version of the QNN core API common to all backends
  Qnn_Version_t coreApiVersion;
  /// Version of the backend-specific API
  Qnn_Version_t backendApiVersion;
} Qnn_ApiVersion_t;

typedef struct {
  uint32_t major;
  uint32_t minor;
  uint32_t patch;
} Qnn_Version_t;


typedef struct {
  /// Backend identifier. See QnnCommon.h for details.
  /// Allowed to be QNN_BACKEND_ID_NULL in case of single backend library, in which case
  /// clients can deduce backend identifier based on library being loaded.
  uint32_t backendId;
  /// Interface provider name. Allowed to be NULL.
  const char* providerName;
  // API version for provided interface
  Qnn_ApiVersion_t apiVersion;
  union UNNAMED {
    // Core interface type and name: e.g. QnnInterface_ImplementationV0_0_t v0_0;
    QNN_INTERFACE_VER_TYPE  QNN_INTERFACE_VER_NAME;
  };
} QnnInterface_t;


///

  /*
         * 
         * C++ Definitions
        typedef enum {
  // Enum Levels must be in ascending order, so that the enum value
  // can be compared with the "maximum" set in QnnLog_create().
  QNN_LOG_LEVEL_ERROR   = 1,
  QNN_LOG_LEVEL_WARN    = 2,
  QNN_LOG_LEVEL_INFO    = 3,
  QNN_LOG_LEVEL_VERBOSE = 4,
  /// Reserved for developer debugging
  QNN_LOG_LEVEL_DEBUG = 5,
  // Present to ensure 32 bits
  QNN_LOG_LEVEL_MAX = 0x7fffffff
} QnnLog_Level_t;

        typedef void* Qnn_Handle_t;

        typedef Qnn_Handle_t Qnn_LogHandle_t;



        typedef void (*QnnLog_Callback_t)(const char* fmt,
                                  QnnLog_Level_t level,
                                  uint64_t timestamp,
                                  va_list args);

        typedef Qnn_ErrorHandle_t(*QnnLog_CreateFn_t)(QnnLog_Callback_t callback,
                                               QnnLog_Level_t maxLogLevel,
                                               Qnn_LogHandle_t* logger);
        */


typedef enum ModelError {
  MODEL_NO_ERROR               = 0,
  MODEL_TENSOR_ERROR           = 1,
  MODEL_PARAMS_ERROR           = 2,
  MODEL_NODES_ERROR            = 3,
  MODEL_GRAPH_ERROR            = 4,
  MODEL_CONTEXT_ERROR          = 5,
  MODEL_GENERATION_ERROR       = 6,
  MODEL_SETUP_ERROR            = 7,
  MODEL_INVALID_ARGUMENT_ERROR = 8,
  MODEL_FILE_ERROR             = 9,
  MODEL_MEMORY_ALLOCATE_ERROR  = 10,
  // Value selected to ensure 32 bits.
  MODEL_UNKNOWN_ERROR = 0x7FFFFFFF
} ModelError_t;


typedef struct {
  QnnProperty_HasCapabilityFn_t             propertyHasCapability;

  QnnBackend_CreateFn_t                     backendCreate;
  QnnBackend_SetConfigFn_t                  backendSetConfig;
  QnnBackend_GetApiVersionFn_t              backendGetApiVersion;
  QnnBackend_GetBuildIdFn_t                 backendGetBuildId;
  QnnBackend_RegisterOpPackageFn_t          backendRegisterOpPackage;
  QnnBackend_GetSupportedOperationsFn_t     backendGetSupportedOperations;
  QnnBackend_ValidateOpConfigFn_t           backendValidateOpConfig;
  QnnBackend_FreeFn_t                       backendFree;

  QnnContext_CreateFn_t                     contextCreate;
  QnnContext_SetConfigFn_t                  contextSetConfig;
  QnnContext_GetBinarySizeFn_t              contextGetBinarySize;
  QnnContext_GetBinaryFn_t                  contextGetBinary;
  QnnContext_CreateFromBinaryFn_t           contextCreateFromBinary;
  QnnContext_FreeFn_t                       contextFree;

  QnnGraph_CreateFn_t                       graphCreate;
  QnnGraph_CreateSubgraphFn_t               graphCreateSubgraph;
  QnnGraph_SetConfigFn_t                    graphSetConfig;
  QnnGraph_AddNodeFn_t                      graphAddNode;
  QnnGraph_FinalizeFn_t                     graphFinalize;
  QnnGraph_RetrieveFn_t                     graphRetrieve;
  QnnGraph_ExecuteFn_t                      graphExecute;
  QnnGraph_ExecuteAsyncFn_t                 graphExecuteAsync;

  QnnTensor_CreateContextTensorFn_t         tensorCreateContextTensor;
  QnnTensor_CreateGraphTensorFn_t           tensorCreateGraphTensor;

  QnnLog_CreateFn_t                         logCreate;
  QnnLog_SetLogLevelFn_t                    logSetLogLevel;
  QnnLog_FreeFn_t                           logFree;

  QnnProfile_CreateFn_t                     profileCreate;
  QnnProfile_SetConfigFn_t                  profileSetConfig;
  QnnProfile_GetEventsFn_t                  profileGetEvents;
  QnnProfile_GetSubEventsFn_t               profileGetSubEvents;
  QnnProfile_GetEventDataFn_t               profileGetEventData;
  QnnProfile_GetExtendedEventDataFn_t       profileGetExtendedEventData;
  QnnProfile_FreeFn_t                       profileFree;

  QnnMem_RegisterFn_t                       memRegister;
  QnnMem_DeRegisterFn_t                     memDeRegister;

  QnnDevice_GetPlatformInfoFn_t             deviceGetPlatformInfo;
  QnnDevice_FreePlatformInfoFn_t            deviceFreePlatformInfo;
  QnnDevice_GetInfrastructureFn_t           deviceGetInfrastructure;
  QnnDevice_CreateFn_t                      deviceCreate;
  QnnDevice_SetConfigFn_t                   deviceSetConfig;
  QnnDevice_GetInfoFn_t                     deviceGetInfo;
  QnnDevice_FreeFn_t                        deviceFree;

  QnnSignal_CreateFn_t                      signalCreate;
  QnnSignal_SetConfigFn_t                   signalSetConfig;
  QnnSignal_TriggerFn_t                     signalTrigger;
  QnnSignal_FreeFn_t                        signalFree;

  QnnError_GetMessageFn_t                   errorGetMessage;
  QnnError_GetVerboseMessageFn_t            errorGetVerboseMessage;
  QnnError_FreeVerboseMessageFn_t           errorFreeVerboseMessage;

  QnnGraph_PrepareExecutionEnvironmentFn_t  graphPrepareExecutionEnvironment;
  QnnGraph_ReleaseExecutionEnvironmentFn_t  graphReleaseExecutionEnvironment;
  QnnGraph_GetPropertyFn_t                  graphGetProperty;

  QnnContext_ValidateBinaryFn_t             contextValidateBinary;
  QnnContext_CreateFromBinaryWithSignalFn_t contextCreateFromBinaryWithSignal;

} QNN_INTERFACE_VER_TYPE;


typedef struct GraphConfigInfo {
  char *graphName;
  const QnnGraph_Config_t **graphConfigs;
} GraphConfigInfo_t;
typedef struct {
  QnnGraph_ConfigOption_t option;
  union UNNAMED {
    QnnGraph_CustomConfig_t customConfig;
    Qnn_Priority_t priority;
    Qnn_ProfileHandle_t profileHandle;
    QnnGraph_ProfilingState_t profilingState;
    uint32_t numProfilingExecutions;
  };
} QnnGraph_Config_t;

typedef enum {
  /// QNN_PRIORITY_LOW is always available for use.
  QNN_PRIORITY_LOW = 0,
  /// QNN_PRIORITY_NORMAL is always available for use.
  QNN_PRIORITY_NORMAL  = 100,
  QNN_PRIORITY_DEFAULT = QNN_PRIORITY_NORMAL,
  /// QNN_PRIORITY_NORMAL_HIGH usage may be restricted and would silently be treated as
  /// QNN_PRIORITY_NORMAL
  QNN_PRIORITY_NORMAL_HIGH = 150,
  /// QNN_PRIORITY_HIGH usage may be restricted and would silently be treated as
  /// QNN_PRIORITY_NORMAL
  QNN_PRIORITY_HIGH = 200,
  // Unused, present to ensure 32 bits.
  QNN_PRIORITY_UNDEFINED = 0x7FFFFFFF
} Qnn_Priority_t;
typedef enum {
  /// Profiling is enabled for the graph
  QNN_GRAPH_PROFILING_STATE_ENABLED = 1,
  /// Profiling is disabled for the graph
  QNN_GRAPH_PROFILING_STATE_DISABLED = 2,
  // Unused, present to ensure 32 bits.
  QNN_GRAPH_PROFILING_STATE_UNDEFINED = 0x7FFFFFFF
} QnnGraph_ProfilingState_t;

typedef Qnn_Handle_t Qnn_ProfileHandle_t;

typedef void* QnnGraph_CustomConfig_t;

typedef enum {
  /// Sets backend custom configs, see backend specific documentation.
  QNN_GRAPH_CONFIG_OPTION_CUSTOM = 0,
  /// Sets priority of a graph within the context. This config overrides
  /// QNN_CONTEXT_CONFIG_OPTION_PRIORITY which provides the default graph priority.
  QNN_GRAPH_CONFIG_OPTION_PRIORITY = 3,
  /// Enables continuous profiling of a graph. This can include finalize and execute data. The
  /// profile handle will be bound to the graph until a new handle is bound or the graph has been
  /// freed. This feature is mutually exclusive with the per-API profile handles. A
  /// Qnn_ProfileHandle_t bound to a graph can be concurrently used with QnnProfile_get* APIs. A
  /// Qnn_ProfileHandle_t may only be bound to one graph at a time. A different Qnn_ProfileHandle_t
  /// may be bound to the graph via QnnGraph_setConfig.
  QNN_GRAPH_CONFIG_OPTION_PROFILE_HANDLE = 4,
  /// Sets the profiling state of a graph. This config should only be used in conjunction with
  /// profiling handles bound with QNN_GRAPH_CONFIG_OPTION_PROFILE_HANDLE. The behaviour is that
  /// the profiling data is only collected when the state is enabled. Setting the state to disabled
  /// causes the profiling data collection to cease. The default state is
  /// QNN_GRAPH_PROFILING_STATE_ENABLED.
  QNN_GRAPH_CONFIG_OPTION_SET_PROFILING_STATE = 5,
  /// Sets the maximum number of QnnGraph_execute/QnnGraph_executeAsync calls that will be profiled.
  /// This config should only be used in conjunction with profiling handles bound with
  /// QNN_GRAPH_CONFIG_OPTION_PROFILE_HANDLE. The default is the
  /// QnnGraph_Config_t::numProfilingExecutions maximum numerical limit.
  QNN_GRAPH_CONFIG_OPTION_SET_PROFILING_NUM_EXECUTIONS = 6,
  // Unused, present to ensure 32 bits.
  QNN_GRAPH_CONFIG_OPTION_UNDEFINED = 0x7FFFFFFF
} QnnGraph_ConfigOption_t;

        typedef qnn_wrapper_api::ModelError_t (*ComposeGraphsFnHandleType_t)(
    Qnn_BackendHandle_t,
    QNN_INTERFACE_VER_TYPE,
    Qnn_ContextHandle_t,
    const qnn_wrapper_api::GraphConfigInfo_t **,
    const uint32_t,
    qnn_wrapper_api::GraphInfo_t ***,
    uint32_t *,
    bool,
    QnnLog_Callback_t,
    QnnLog_Level_t);

    typedef Qnn_Handle_t Qnn_SignalHandle_t;
    typedef Qnn_Handle_t Qnn_ProfileHandle_t;
    typedef Qnn_ErrorHandle_t (*QnnGraph_FinalizeFn_t)(Qnn_GraphHandle_t graphHandle,
                                                   Qnn_ProfileHandle_t profileHandle,
                                                   Qnn_SignalHandle_t signalHandle);

typedef Qnn_Handle_t Qnn_GraphHandle_t;

typedef struct {
  /// Version of the QNN tensor
  Qnn_TensorVersion_t version;
  
    Qnn_TensorV2_t v2;
  
} Qnn_Tensor_t;

typedef enum {
  /// Client application writeable tensor.
  QNN_TENSOR_TYPE_APP_WRITE = 0,
  /// Client application readable tensor.
  QNN_TENSOR_TYPE_APP_READ = 1,
  /// Tensor that can both be read and written by an application. Used in scenarios that may include
  /// supplying an output tensor from one graph as the input to another graph.
  QNN_TENSOR_TYPE_APP_READWRITE = 2,
  /// Tensor native to a graph which may be optimized by a backend and are not accessible by a
  /// client.
  QNN_TENSOR_TYPE_NATIVE = 3,
  /// Static data which doesn't change during execution and may be optimized by a backend. Since the
  /// data cannot change, static tensors cannot have dynamic dimensions.
  QNN_TENSOR_TYPE_STATIC = 4,
  /// Tensor type NULL which can be used to represent optional tensors. Other Qnn_Tensor_t metadata
  /// is ignored.
  QNN_TENSOR_TYPE_NULL = 5,
  // Unused, present to ensure 32 bits.
  QNN_TENSOR_TYPE_UNDEFINED = 0x7FFFFFFF
} Qnn_TensorType_t;

typedef uint32_t Qnn_TensorDataFormat_t;

typedef enum {
  // Signed Int: 0x00XX

  /// 8-bit integer type
  QNN_DATATYPE_INT_8 = 0x0008,
  /// 16-bit integer type
  QNN_DATATYPE_INT_16 = 0x0016,
  /// 32-bit integer type
  QNN_DATATYPE_INT_32 = 0x0032,
  /// 64-bit integer type
  QNN_DATATYPE_INT_64 = 0x0064,

  // Unsigned Int: 0x01XX
  QNN_DATATYPE_UINT_8  = 0x0108,
  QNN_DATATYPE_UINT_16 = 0x0116,
  QNN_DATATYPE_UINT_32 = 0x0132,
  QNN_DATATYPE_UINT_64 = 0x0164,

  // Float: 0x02XX
  QNN_DATATYPE_FLOAT_16 = 0x0216,
  QNN_DATATYPE_FLOAT_32 = 0x0232,
  QNN_DATATYPE_FLOAT_64 = 0x0264,

  // Signed Fixed Point: 0x03XX
  QNN_DATATYPE_SFIXED_POINT_4  = 0x0304,
  QNN_DATATYPE_SFIXED_POINT_8  = 0x0308,
  QNN_DATATYPE_SFIXED_POINT_16 = 0x0316,
  QNN_DATATYPE_SFIXED_POINT_32 = 0x0332,

  // Unsigned Fixed Point: 0x04XX
  QNN_DATATYPE_UFIXED_POINT_4  = 0x0404,
  QNN_DATATYPE_UFIXED_POINT_8  = 0x0408,
  QNN_DATATYPE_UFIXED_POINT_16 = 0x0416,
  QNN_DATATYPE_UFIXED_POINT_32 = 0x0432,

  // Bool: 0x05XX
  /// 8-bit boolean type, 0 = false, any non-zero value = true
  QNN_DATATYPE_BOOL_8 = 0x0508,

  // String: 0x06xx
  QNN_DATATYPE_STRING = 0x0608,

  // Unused, present to ensure 32 bits.
  QNN_DATATYPE_UNDEFINED = 0x7FFFFFFF
} Qnn_DataType_t;
typedef struct {
  Qnn_Definition_t encodingDefinition;
  /// Quantization encoding type identifying quantization encoding structure to use
  Qnn_QuantizationEncoding_t quantizationEncoding;
  union UNNAMED {
    Qnn_ScaleOffset_t scaleOffsetEncoding;
    Qnn_AxisScaleOffset_t axisScaleOffsetEncoding;
    Qnn_BwScaleOffset_t bwScaleOffsetEncoding;
    Qnn_BwAxisScaleOffset_t bwAxisScaleOffsetEncoding;
  };
} Qnn_QuantizeParams_t;
typedef struct {
  /// app-accessible data pointer, provided by app.
  void* data;
  /// size of buffer, in bytes, pointed to by data.
  uint32_t dataSize;
} Qnn_ClientBuffer_t;
typedef Qnn_Handle_t Qnn_MemHandle_t;
typedef enum {
  /// Raw memory pointer
  QNN_TENSORMEMTYPE_RAW = 0,
  /// Memory object, provide capability for memory sharing in between QNN accelerator backends.
  QNN_TENSORMEMTYPE_MEMHANDLE = 1,
  // Unused, present to ensure 32 bits.
  QNN_TENSORMEMTYPE_UNDEFINED = 0x7FFFFFFF
} Qnn_TensorMemType_t;


typedef struct {
  /// Unique integer identifier for a tensor, generated by the backend based on the tensor name.
  uint32_t id;
  /// Unique tensor name.
  const char* name;
  /// Tensor type.
  Qnn_TensorType_t type;
  /// Tensor data formatting in memory (refer to definition type for info).
  Qnn_TensorDataFormat_t dataFormat;
  /// Tensor data type.
  Qnn_DataType_t dataType;
  /// Tensor quantization params.
  Qnn_QuantizeParams_t quantizeParams;
  /// Tensor rank. Note that rank cannot be dynamic.
  uint32_t rank;
  /// Tensor dimension array of length _rank_. For detailed behavior of dimensions field with
  /// various APIs, refer to their API documentation. Must be NULL when rank is 0. Must contain
  /// non-zero values if non-null.
  uint32_t* dimensions;
  /// Tensor memory type.
  Qnn_TensorMemType_t memType;
  /// Actual data contained in the tensor.
  union UNNAMED {
    /// Tensor data provided by client as a pointer to raw memory (see QNN_TENSORMEMTYPE_RAW).
    Qnn_ClientBuffer_t clientBuf;
    /// Tensor data shared via a memory handle (see QNN_TENSORMEMTYPE_MEMHANDLE).
    Qnn_MemHandle_t memHandle;
  };
  /// A boolean array of length _rank_ indicating if a tensor dimension is dynamic. Must be NULL
  /// when rank is 0. Can be NULL if all dimensions are static. A true (non-zero) value indicates
  /// the corresponding dimension is dynamic and a false (zero) value indicates the corresponding
  /// dimension is static. Note that QNN_TENSOR_TYPE_STATIC tensors (see _type_) cannot have dynamic
  /// dimensions. Support for this field can be queried via
  /// QNN_PROPERTY_TENSOR_SUPPORT_DYNAMIC_DIMENSIONS. If this field is unsupported, it must be NULL.
  uint8_t* isDynamicDimensions;
  /// Sparse tensor parameters. Pertains only to sparse tensors (see QNN_TENSOR_DATA_FORMAT_SPARSE).
  /// Support for this field can be queried via QNN_PROPERTY_TENSOR_SUPPORT_SPARSITY.
  Qnn_SparseParams_t sparseParams;
  /// Indicates whether or not a call to QnnGraph_execute[Async] produced this output tensor.
  /// Applicable only to QNN_TENSOR_TYPE_APP_READ and QNN_TENSOR_TYPE_APP_READWRITE tensor types.
  /// This field will be undefined if QNN_PROPERTY_GRAPH_SUPPORT_EARLY_TERMINATION is not
  /// supported. Otherwise, this field is not used.
  uint8_t isProduced;
} Qnn_TensorV2_t;


 typedef struct GraphInfo {
  Qnn_GraphHandle_t graph;
  char *graphName;
  Qnn_Tensor_t *inputTensors;
  uint32_t numInputTensors;
  Qnn_Tensor_t *outputTensors;
  uint32_t numOutputTensors;
} GraphInfo_t;

using ReadInputListsRetType_t = std::tuple<std::vector<std::vector<std::vector<std::string>>>,
                                           std::vector<std::unordered_map<std::string, uint32_t>>,
                                           bool>;

                                           sample_app::ReadInputListsRetType_t sample_app::readInputLists(
    std::vector<std::string> inputFileListPaths) {
  std::vector<std::vector<std::vector<std::string>>> filePathsLists;
  std::vector<std::unordered_map<std::string, uint32_t>> inputNameToIndexMaps;
  for (auto const &path : inputFileListPaths) {
    bool readSuccess;
    std::vector<std::vector<std::string>> filePathList;
    std::unordered_map<std::string, uint32_t> inputNameToIndex;
    std::tie(filePathList, inputNameToIndex, readSuccess) = readInputList(path);
    if (!readSuccess) {
      filePathsLists.clear();
      return std::make_tuple(filePathsLists, inputNameToIndexMaps, false);
    }
    filePathsLists.push_back(filePathList);
    inputNameToIndexMaps.push_back(inputNameToIndex);
  }
  return std::make_tuple(filePathsLists, inputNameToIndexMaps, true);
}
